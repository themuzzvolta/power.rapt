name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ created ]

env:
  MODULE_NAME: power.rapt

jobs:
  test:
    name: Test Module
    runs-on: windows-latest
    strategy:
      matrix:
        powershell-version: ['5.1', '7.x']
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup PowerShell ${{ matrix.powershell-version }}
      if: matrix.powershell-version == '7.x'
      uses: actions/setup-powershell@v1
      with:
        powershell-version: ${{ matrix.powershell-version }}
    
    - name: Install Required Modules
      shell: pwsh
      run: |
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name Pester, PSScriptAnalyzer -Force -Scope CurrentUser
        Write-Host "Installed modules:"
        Get-Module -ListAvailable Pester, PSScriptAnalyzer
    
    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        Write-Host "Running PSScriptAnalyzer..."
        $results = @()
        
        # Analyze module files
        $files = @(
          ".\$env:MODULE_NAME.psm1",
          ".\$env:MODULE_NAME.psd1"
        )
        
        # Add Public and Private function files
        if (Test-Path ".\Public") {
          $files += Get-ChildItem -Path ".\Public" -Filter "*.ps1" -Recurse
        }
        if (Test-Path ".\Private") {
          $files += Get-ChildItem -Path ".\Private" -Filter "*.ps1" -Recurse
        }
        
        foreach ($file in $files) {
          if (Test-Path $file) {
            $result = Invoke-ScriptAnalyzer -Path $file -Severity Error, Warning
            $results += $result
          }
        }
        
        if ($results) {
          $results | Format-Table -AutoSize
          $errorCount = ($results | Where-Object Severity -eq 'Error').Count
          $warningCount = ($results | Where-Object Severity -eq 'Warning').Count
          
          Write-Host "PSScriptAnalyzer found $errorCount errors and $warningCount warnings"
          
          if ($errorCount -gt 0) {
            throw "PSScriptAnalyzer found $errorCount errors that must be fixed."
          }
        } else {
          Write-Host "✅ PSScriptAnalyzer completed with no issues found."
        }
    
    - name: Test Module Import
      shell: pwsh
      run: |
        Write-Host "Testing module import..."
        try {
          Import-Module ".\$env:MODULE_NAME.psd1" -Force
          $importedModule = Get-Module $env:MODULE_NAME
          if ($importedModule) {
            Write-Host "✅ Module imported successfully"
            Write-Host "Module Version: $($importedModule.Version)"
            Write-Host "Exported Functions: $($importedModule.ExportedFunctions.Count)"
          } else {
            throw "Module failed to import"
          }
        }
        catch {
          Write-Error "❌ Module import failed: $_"
          throw
        }
    
    - name: Run Pester Tests
      shell: pwsh
      run: |
        Write-Host "Running Pester tests..."
        
        if (-not (Test-Path ".\tests")) {
          Write-Host "⚠️ No tests directory found, skipping tests"
          return
        }
        
        $testResults = Invoke-Pester -Path ".\tests" -OutputFormat NUnitXml -OutputFile "TestResults.xml" -PassThru
        
        Write-Host "Test Results:"
        Write-Host "  Total: $($testResults.TotalCount)"
        Write-Host "  Passed: $($testResults.PassedCount)" -ForegroundColor Green
        Write-Host "  Failed: $($testResults.FailedCount)" -ForegroundColor Red
        Write-Host "  Skipped: $($testResults.SkippedCount)" -ForegroundColor Yellow
        
        if ($testResults.FailedCount -gt 0) {
          throw "❌ $($testResults.FailedCount) out of $($testResults.TotalCount) tests failed"
        }
        
        Write-Host "✅ All tests passed!"
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-ps${{ matrix.powershell-version }}
        path: TestResults.xml

  build:
    name: Build Module
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup PowerShell
      uses: actions/setup-powershell@v1
      with:
        powershell-version: '7.x'
    
    - name: Create Module Package
      shell: pwsh
      run: |
        Write-Host "Creating module package..."
        
        $outputPath = ".\Output\$env:MODULE_NAME"
        New-Item -Path $outputPath -ItemType Directory -Force | Out-Null
        
        # Copy core module files
        Copy-Item ".\$env:MODULE_NAME.psd1" -Destination $outputPath
        Copy-Item ".\$env:MODULE_NAME.psm1" -Destination $outputPath
        
        # Copy folders
        $folders = @('Public', 'Private', 'docs')
        foreach ($folder in $folders) {
          if (Test-Path ".\$folder") {
            Copy-Item ".\$folder" -Destination $outputPath -Recurse -Force
          }
        }
        
        # Copy additional files
        $files = @('README.md', 'CHANGELOG.md', 'LICENSE')
        foreach ($file in $files) {
          if (Test-Path ".\$file") {
            Copy-Item ".\$file" -Destination $outputPath
          }
        }
        
        Write-Host "✅ Module package created at: $outputPath"
        
        # List package contents
        Write-Host "Package contents:"
        Get-ChildItem -Path $outputPath -Recurse | Select-Object FullName
    
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: module-package
        path: Output/${{ env.MODULE_NAME }}

  publish:
    name: Publish to PowerShell Gallery
    runs-on: windows-latest
    needs: build
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: module-package
        path: ./${{ env.MODULE_NAME }}
    
    - name: Setup PowerShell
      uses: actions/setup-powershell@v1
      with:
        powershell-version: '7.x'
    
    - name: Publish to PowerShell Gallery
      shell: pwsh
      env:
        POWERSHELL_GALLERY_API_KEY: ${{ secrets.POWERSHELL_GALLERY_API_KEY }}
      run: |
        Write-Host "Publishing module to PowerShell Gallery..."
        
        if (-not $env:POWERSHELL_GALLERY_API_KEY) {
          throw "PowerShell Gallery API key not found"
        }
        
        try {
          Publish-Module -Path "./$env:MODULE_NAME" -NuGetApiKey $env:POWERSHELL_GALLERY_API_KEY -Verbose
          Write-Host "✅ Module published successfully to PowerShell Gallery!"
        }
        catch {
          Write-Error "❌ Failed to publish module: $_"
          throw
        }
